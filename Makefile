# List variables
export COMPOSE_PROJECT_NAME=environment2

# Determine if .env file exist
ifneq ("$(wildcard .env)","")
	include .env
endif

ifndef INSIDE_DOCKER_CONTAINER
	INSIDE_DOCKER_CONTAINER = 0
endif

PROJECT_NAME := -p ${COMPOSE_PROJECT_NAME}
INTERACTIVE := $(shell [ -t 0 ] && echo 1)
ERROR_ONLY_FOR_HOST = @printf "\033[33mThis command for host machine\033[39m\n"
.DEFAULT_GOAL := help
ifneq ($(INTERACTIVE), 1)
	OPTION_T := -T
endif

help: ## Shows available commands with description
	@echo "List of available commands:"
	@grep -E '^[a-zA-Z-]+:.*?## .*$$' Makefile | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "[32m%-27s[0m %s\n", $$1, $$2}'

build: ## Build dev environment
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) build $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

start: ## Start dev environment
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) up -d $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

down: ## Stop and remove dev environment containers, networks
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) down $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

destroy: ## Stop and remove dev environment containers, networks, volumes
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) down -v $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

stop: ## Stop dev environment containers
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) stop $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

restart: ## Stop and start dev environment
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) stop $(c)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) up -d $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

logs: ## View logs owncloud
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	docker logs --tail=100 -f ${COMPOSE_PROJECT_NAME}-owncloud_server
else
	$(ERROR_ONLY_FOR_HOST)
endif

logs-mysql: ## View logs owncloud
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	docker logs --tail=100 -f ${COMPOSE_PROJECT_NAME}-owncloud_mariadb
else
	$(ERROR_ONLY_FOR_HOST)
endif

ps: ## View list containers
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml ps $(c)
else
	$(ERROR_ONLY_FOR_HOST)
endif

ssh: ## Get bash inside owncloud container
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) exec owncloud entrypoint bash
else
	$(ERROR_ONLY_FOR_HOST)
endif

ssh-root: ## Get bash inside owncloud container use root
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) exec --user=root owncloud entrypoint bash
else
	$(ERROR_ONLY_FOR_HOST)
endif

ssh-mysql: ## Get bash inside mysql docker container
ifeq ($(INSIDE_DOCKER_CONTAINER), 0)
	@OWNCLOUD_VERSION=${OWNCLOUD_VERSION} OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN} OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS} ADMIN_USERNAME=${ADMIN_USERNAME} ADMIN_PASSWORD=${ADMIN_PASSWORD} HTTP_PORT=${HTTP_PORT} DB_TYPE=${DB_TYPE} DB_MYSQL_UTF8MB4=${DB_MYSQL_UTF8MB4} DB_PORT=${DB_PORT} DB_DATABASE=${DB_DATABASE} DB_ROOTPASSWORD=${DB_ROOTPASSWORD} DB_USER=${DB_USER} DB_PASSWORD=${DB_PASSWORD} REDIS_PORT=${REDIS_PORT} LIBRE_PORT=${LIBRE_PORT} docker-compose -f docker-compose.yml $(PROJECT_NAME) exec mysql bash
else
	$(ERROR_ONLY_FOR_HOST)
endif
